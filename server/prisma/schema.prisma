// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Equipment {
  id        Int             @id @default(autoincrement())
  name      String 
  type      String
  status    EquipmentStatus @default(working)
  brand     String
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
}

enum EquipmentStatus  {
  working 
  maintenance 
  broken
}

model Plan {
    id                Int             @id @default(autoincrement())
    duration          Int 
    price             Float
    max_days_per_week Int 
    is_vip            Boolean    @default(false)
    type              String 
    memberships       Membership[]
    description       String
    seance            Int
}

model Admin {
  id        Int             @id @default(autoincrement())
  name      String   
  email     String          @unique
  phone     String
  password  String
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
}

model User {
  id            Int             @id @default(autoincrement())
  firstName     String   
  lastName      String   
  email         String        @unique
  phone         String
  gender        gender 
  nationalId    String         @unique  
  memberships   Membership[] 
  userSlots     UserSlot[]   
  session       TrainerSession[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

enum gender {
  male 
  female
}

// 
model Session {
  id           Int          @id @default(autoincrement())
  user         TrainerSession[]
  startTime    Int
  endTime      Int
  day          Day
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
}

enum Day {
  Monday 
  Tuesday  
  Wednesday  
  Thursday  
  Friday  
  Saturday  
  Sunday
}

model TrainerSession {
  trainerId Int
  sessionId Int
  createdAt DateTime @default(now())
  day       Day
  trainer   User  @relation(fields: [trainerId], references: [id])
  session   Session  @relation(fields: [sessionId], references: [id])
  is_vip    Boolean
  @@id([trainerId, sessionId]) 
}
// 
model Membership {
  id           Int          @id @default(autoincrement())
  user         User         @relation(fields: [userId], references: [id])
  userId       Int    
  plan         Plan         @relation(fields: [planId], references: [id])
  planId       Int    
  startDate    DateTime
  endDate      DateTime
  pricePaid    Float
  payment      Payment[]
  status       MembershipStatus @default(ACTIVE)
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
}


enum MembershipStatus {
  ACTIVE
  CANCELLED
  EXPIRED
}


model Payment {
  id            Int          @id @default(autoincrement())
  membership    Membership   @relation(fields: [membershipId], references: [id])
  membershipId  Int
  amount        Float
  paymentDate   DateTime     @default(now())
}

model SlotTemplate {
  id            Int        @id @default(autoincrement())
  dayOfWeek     String     
  startTime     String     
  endTime       String     
  capacityBasic Int
  capacityVip   Int
  userSlots     UserSlot[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model UserSlot {
  id             Int          @id @default(autoincrement())
  userId         Int
  slotTemplateId Int
  date           DateTime     // The actual date user booked
  user           User         @relation(fields: [userId], references: [id])
  isVip          Boolean
  slotTemplate   SlotTemplate @relation(fields: [slotTemplateId], references: [id])
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

